import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class University {

	static String adminName = new String();
	static String adminId = new String();
	static String lecturerName = new String();
	static String lecturerId = new String();
	static String lecturerClass = new String();
	static String studentName = new String();
	static String studentId = new String();

	public static void authorize()
			throws IOException, NoSuchAdminException, NoSuchLecturerException, NoSuchStudentException {
		@SuppressWarnings("resource")
		Scanner scan = new Scanner(System.in);
		int input = 0;

		System.out.println("Please choose: \n (1) Admin \n "
				+ "(2) Lecturer \n (3) Student \n (4) Back\n");
		input = scan.nextInt();

		switch (input) {
		case 1024: {
			System.out.println("You are logged in as Major Admin, you can only create another admin");
			AdminFileManager.createAdmin();
			System.out.println("Now authorize with registrated admin profile.");
		}
		case 1: {
			System.out.println("Name");
			adminName = scan.next();

			System.out.println("ID Number");
			adminId = scan.next();

			String currentLine = new String();
			String wanted = new String();
			ArrayList<String> admins = new ArrayList<String>();
			try {
				BufferedReader buffReader = new BufferedReader(new FileReader("admins.txt"));

				while ((currentLine = buffReader.readLine()) != null) {
					admins.add(currentLine);
				}
				buffReader.close();
				wanted = adminId + "\t" + adminName;
				if (admins.contains(wanted)) {
					AdminOperator.adminOperate();
				} else {
					throw new NoSuchAdminException();
				}

			} catch (IOException e) {
				System.out.println(e.getMessage());
			} catch (NoSuchAdminException e) {
				System.out.println(e.getMessage());
				authorize();
			}
			break;
		}
		case 2: {
			System.out.println("Name");
			lecturerName = scan.next();

			System.out.println("ID Number");
			lecturerId = scan.next();

			System.out.println("University Class");
			lecturerClass = scan.next();

			String currentLine = new String();
			String wanted = new String();
			ArrayList<String> lecturers = new ArrayList<String>();
			try {
				BufferedReader buffReader = new BufferedReader(new FileReader("lecturers.txt"));

				while ((currentLine = buffReader.readLine()) != null) {
					lecturers.add(currentLine);
				}
				buffReader.close();
				wanted = lecturerId + "\t" + lecturerName + "\t" + lecturerClass;
				if (lecturers.contains(wanted)) {
					LecturerOperator.lecturerOperate();
				} else {
					throw new NoSuchLecturerException();
				}

			} catch (IOException e) {
				System.out.println(e.getMessage());
			} catch (NoSuchLecturerException e) {
				System.out.println(e.getMessage());
				authorize();
			}
			break;
		}
		case 3: {
			System.out.println("Name");
			studentName = scan.next();

			System.out.println("Faculty Number");
			studentId = scan.next();

			String currentLine = new String();
			String wanted = new String();
			ArrayList<String> students = new ArrayList<String>();
			try {
				BufferedReader buffReader = new BufferedReader(new FileReader("students.txt"));

				while ((currentLine = buffReader.readLine()) != null) {
					students.add(currentLine);
				}
				buffReader.close();
				wanted = studentId + "\t" + studentName;
				if (students.contains(wanted)) {
					StudentOperator.studentOperate();
				} else {
					throw new NoSuchStudentException();
				}

			} catch (IOException e) {
				System.out.println(e.getMessage());
			} catch (NoSuchStudentException e) {
				System.out.println(e.getMessage());
				authorize();
			}
			break;
		}
		case 4: {
			Login.entry();
			break;
		}
		default: {
			System.out.println("Invalid input");
		}
		}
	}

}
